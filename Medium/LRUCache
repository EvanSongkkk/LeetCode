
class ListNode:
    def __init__(self, key=None,value=None):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None


class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.hashmap = {}
        self.head = ListNode()     #新建节点head tail
        self.tail = ListNode()
        self.head.next = self.tail      # 初始化头尾
        self.tail.prev = self.head
    

    def move_to_tail(self, key):
        node = self.hashmap[key]        # 讲哈希表key指向的节点拿出
        node.prev.next = node.next
        node.next.prev = node.prev

        node.prev = self.tail.prev      # node插到尾节点前
        node.next = self.tail
        self.tail.prev.next = node     
        self.tail.prev = node


    def get(self, key: int) -> int:
        if key in self.hashmap:
            self.move_to_tail(key)
        res = self.hashmap.get(key,-1)
        if res == -1:
            return res
        else:
            return res.value
        

    def put(self, key: int, value: int) -> None:
        if key in self.hashmap:
            self.hashmap[key].value = value
            self.move_to_tail(key)
        else:
            if (len(self.hashmap)) == self.capacity:
                self.hashmap.pop(self.head.next.key)
                self.head.next = self.head.next.next
                self.head.next.prev = self.head
            new = ListNode(key,value)
            self.hashmap[key] = new
            new.prev = self.tail.prev
            new.next = self.tail
            self.tail.prev.next = new
            self.tail.prev = new



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
